name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  LONG_IMAGE_TAG: ${{ github.sha }}


jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout репозиторий
        uses: actions/checkout@v4

      - name: Установка короткого хеша
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Логин в GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Приведение имени репозитория к нижнему регистру
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Сборка и пуш образа backend
        uses: docker/build-push-action@v5
        with:
          context: backend
          tags: |
            ghcr.io/${{ env.REPO_NAME }}/rulehub-backend:latest
            ghcr.io/${{ env.REPO_NAME }}/rulehub-backend:${{ env.IMAGE_TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-tests:
    name: Build Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout репозиторий
        uses: actions/checkout@v4

      - name: Установка короткого хеша
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Логин в GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Приведение имени репозитория к нижнему регистру
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Сборка и пуш образа backend-tests
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile.test
          tags: |
            ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:latest
            ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:${{ env.IMAGE_TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-tests:
    name: Run Backend Tests and Tag Stable
    runs-on: ubuntu-latest
    needs: [build-backend, build-tests]

    steps:
      - name: Checkout репозиторий
        uses: actions/checkout@v4

      - name: Установка короткого хеша и имени репозитория
        run: |
          echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Логин в GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Установка docker-compose (если нужен)
        run: |
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          docker-compose --version
      
      - name: Создание файла .env для тестового окружения
        run: |
          cat > backend/.env <<EOF
          PASSWORD_SALT=salt_st_piterburg
          PASSWORD_JWT_REFRESH_SECRET=jwt_test_secret_refresh
          PASSWORD_JWT_ACCESS_SECRET=jwt_test_secret_access
          EOF

      - name: Запуск сервисов тестового окружения
        run: |
          docker-compose -f backend/test.docker-compose.yml up -d

      - name: Ожидание готовности rulehub-backend
        run: |
          for i in {1..30}; do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' rulehub-backend 2>/dev/null || echo "not-found")
            echo "rulehub-backend health: $health_status"
            if [ "$health_status" = "healthy" ]; then
              echo "rulehub-backend is healthy"
              break
            fi
            sleep 5
          done
      
          # Финальная проверка и вывод логов при неудаче
          health_status=$(docker inspect --format='{{.State.Health.Status}}' rulehub-backend 2>/dev/null || echo "not-found")
          if [ "$health_status" != "healthy" ]; then
            echo "rulehub-backend did not become healthy"
            docker-compose -f backend/test.docker-compose.yml logs rulehub-backend
            exit 1
          fi
        
      
      - name: Получение имени docker-compose сети
        id: network
        run: |
          NET=$(docker network ls --format '{{.Name}}' | grep 'rulehub-net$' || true)
          echo "DOCKER_COMPOSE_NETWORK=$NET" >> $GITHUB_ENV

      - name: Отладка docker network
        run: docker network inspect $DOCKER_COMPOSE_NETWORK
  
      - name: Запуск тестов через docker run
        run: |
          docker run --rm \
            --network $DOCKER_COMPOSE_NETWORK \
            -e API_BASE_URL=http://rulehub-backend:1324 \
            ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:${{ env.IMAGE_TAG }}


      - name: Остановка тестового окружения
        if: always()
        run: docker-compose -f backend/test.docker-compose.yml down

      - name: Тегирование образов на stable (если тесты прошли)
        run: |
          docker tag ghcr.io/${{ env.REPO_NAME }}/rulehub-backend:${{ env.IMAGE_TAG }} ghcr.io/${{ env.REPO_NAME }}/rulehub-backend:stable
          docker tag ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:${{ env.IMAGE_TAG }} ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:stable
          docker push ghcr.io/${{ env.REPO_NAME }}/rulehub-backend:stable
          docker push ghcr.io/${{ env.REPO_NAME }}/rulehub-backend-tests:stable
